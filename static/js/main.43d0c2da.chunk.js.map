{"version":3,"sources":["component/card/card.js","socket.js","container/myhand/myhand.js","component/oponenthand/opponenthand.js","component/tellhands/tellhands.js","component/trumpdecide/trumpdecide.js","container/board/board.js","container/game/game.js","component/join-create/joinorcreate.js","App.js","serviceWorker.js","index.js"],"names":["props","card","visible","otherProps","of","suit","value","path","className","src","alt","socket","socketIOClient","indexOf","require","values","valueOf","hand","isMyTurn","username","currentBoard","trump","style","marginTop","sort","c1","c2","localeCompare","map","key","onClick","board","length","baseSuit","filter","c","clickable","emit","message","warn","isVerticle","points","minHands","useState","hands","setHands","suits","setTrump","display","flexDirection","alignSelf","s","backgroundColor","cards","Game","gameRoomData","JSON","parse","this","console","log","players","gameCode","playersOrder","status","boardComponent","undefined","tellHandsUsername","minHandsToTell","trumpTeller","turnOf","lastRoundWinner","push","shift","p","i","Component","onCreate","onJoin","alignItems","id","placeholder","type","localStorage","getItem","e","document","getElementById","App","on","data","setItem","setState","stringify","render","state","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.43d0c2da.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default props => {\n  const { card, visible, of, ...otherProps } = props;\n  const { suit, value } = card;\n  let path = \"cards/RED_BACK.svg\";\n  if (visible) {\n    path = `cards/${value}${suit}.svg`;\n  }\n  return <img {...otherProps} className=\"card\" src={path} alt={path}></img>;\n};\n","import socketIOClient from \"socket.io-client\";\n\nconst socket = socketIOClient(\"https://18.216.249.155:4001\");\n// const socket = socketIOClient(\"http://localhost:4001\");\nexport default socket;\n","import React, { useState } from \"react\";\nimport Card from \"../../component/card/card\";\nimport socket from \"../../socket\";\nimport { message } from \"antd\";\nconst isEqual = require(\"lodash/isEqual\");\nconst indexOf = require(\"lodash/indexOf\");\n\nconst values = [\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"10\",\n  \"J\",\n  \"Q\",\n  \"K\",\n  \"A\"\n];\nfunction valueOf(value) {\n  return indexOf(values, value);\n}\n\nfunction clickable(card, hand, board) {\n  if (board.length == 0) return true;\n  const baseSuit = board[0].card.suit;\n  if (card.suit == baseSuit) return true;\n  return hand.filter(c => c.suit == baseSuit).length == 0;\n}\n\nexport default props => {\n  const { hand, isMyTurn, username, trump, currentBoard } = props;\n  return (\n    <div style={isMyTurn ? { marginTop: \"20px\" } : {}}>\n      <div className=\"hand hhand-compact active-hand\">\n        {hand\n          .sort((c1, c2) => valueOf(c2.value) - valueOf(c1.value))\n          .sort((c1, c2) => c1.suit.localeCompare(c2.suit))\n          .map((card, key) => (\n            <Card\n              onClick={() =>\n                clickable(card, hand, currentBoard)\n                  ? socket.emit(\"dealt-card\", { username, card })\n                  : message.warn(\"cannot deal this card\")\n              }\n              visible={true}\n              key={key}\n              card={card}\n            ></Card>\n          ))}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Card from \"../card/card\";\n\nexport default props => {\n  const { hand, isVerticle, username, points } = props;\n  return (\n    <div className={`hand ${isVerticle ? \"v\" : \"h\"}hand-compact active-hand`}>\n      <h3>{username}(Points - {points.length})</h3>\n      <div>\n        {hand.map((card, key) => (\n          <Card key={key} card={card}></Card>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport socket from \"../../socket\";\n\nexport default props => {\n  const { minHands, username } = props;\n\n  const [hands, setHands] = useState(minHands);\n  return (\n    <div>\n      <div\n        onClick={() => {\n          if (hands > minHands) setHands(hands - 1);\n        }}\n        className=\"button\"\n      >\n        -\n      </div>\n      <p>{hands}</p>\n      <div\n        onClick={() => {\n          if (hands < 13) setHands(hands + 1);\n        }}\n        className=\"button\"\n      >\n        +\n      </div>\n      <div\n        onClick={() => {\n          socket.emit(\"my-hand-count\", { username, hands });\n        }}\n        className=\"button\"\n      >\n        SUBMIT\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport socket from \"../../socket\";\nconst suits = [\"S\", \"H\", \"C\", \"D\"];\nexport default props => {\n  const { username } = props;\n  const [trump, setTrump] = useState(\"S\");\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <div style={{ alignSelf: \"center\" }}>Decide Trump</div>\n      <div className=\"trump-option\">\n        {suits.map(s => (\n          <div\n            style={trump == s ? { backgroundColor: \"blue\" } : {}}\n            onClick={() => setTrump(s)}\n          >\n            {s}\n          </div>\n        ))}\n      </div>\n      <div\n        style={{ alignSelf: \"center\" }}\n        onClick={() => {\n          socket.emit(\"trump-decide\", { username, trump });\n        }}\n        className=\"button\"\n      >\n        SUBMIT\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport Card from \"../../component/card/card\";\n\nexport default props => {\n  const { username, cards } = props;\n  return (\n    <div>\n      <div className=\"board-cards\">\n        {cards.map((card, key) => (\n          <div>\n            <Card\n              key={key}\n              visible={true}\n              card={card.card}\n              of={card.username}\n            ></Card>\n            <div>{card.username}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport MyHand from \"../myhand/myhand\";\nimport OpponentHand from \"../../component/oponenthand/opponenthand\";\nimport TellHands from \"../../component/tellhands/tellhands\";\nimport TrumpDecide from \"../../component/trumpdecide/trumpdecide\";\nimport Board from \"../board/board\";\n\nexport default class Game extends Component {\n  render() {\n    const gameRoomData = JSON.parse(this.props.gameRoomData);\n    const username = this.props.username;\n    console.log(gameRoomData, username);\n    const { players, gameCode, playersOrder, status, trump } = gameRoomData;\n\n    if (status === \"WAITING_TO_JOIN\") {\n      return <p>Waiting for other players, JOIN GAME {gameCode}</p>;\n    }\n    let boardComponent = undefined;\n    if (status === \"TELL_HANDS\") {\n      if (username === gameRoomData.tellHandsUsername) {\n        boardComponent = (\n          <TellHands\n            username={username}\n            minHands={gameRoomData.minHandsToTell}\n          ></TellHands>\n        );\n      } else {\n        boardComponent = (\n          <p>Waiting for {gameRoomData.tellHandsUsername} to tell Hands</p>\n        );\n      }\n    }\n    if (status === \"TRUMP_DECIDE\") {\n      if (username === gameRoomData.trumpTeller) {\n        boardComponent = <TrumpDecide username={username}></TrumpDecide>;\n      } else {\n        boardComponent = (\n          <p>\n            Waiting for {gameRoomData.trumpTeller} to tell Trump.{\" \"}\n            {gameRoomData.trumpTeller} will make {gameRoomData.minHandsToTell}{\" \"}\n            hands\n          </p>\n        );\n      }\n    }\n    if (status === \"GAME_STARTED\") {\n      const board = (\n        <Board username={username} cards={gameRoomData.currentBoard}></Board>\n      );\n      if (username === gameRoomData.turnOf) {\n        boardComponent = (\n          <div>\n            {board}\n            <div>your move</div>\n            <div>last round winner is {gameRoomData.lastRoundWinner}</div>\n          </div>\n        );\n      } else {\n        boardComponent = (\n          <div>\n            {board}\n            <div>Waiting for {gameRoomData.turnOf} to deal a card.</div>\n            <div>last round winner is {gameRoomData.lastRoundWinner}</div>\n          </div>\n        );\n      }\n    }\n\n    while (playersOrder[0] !== username) {\n      playersOrder.push(playersOrder.shift());\n    }\n    return (\n      <div className=\"gameContainer\">\n        {playersOrder\n          .filter(p => p !== username)\n          .map((p, i) => {\n            return (\n              <div key={i} className={`player${i} player`}>\n                <OpponentHand\n                  isVerticle={i % 2 === 0}\n                  hand={players[p].cards}\n                  username={p}\n                  points={players[p].points}\n                ></OpponentHand>\n              </div>\n            );\n          })}\n        <div className=\"me\">\n          <MyHand\n            trump={trump}\n            username={username}\n            isMyTurn={username === gameRoomData.turnOf}\n            hand={players[username].cards}\n            currentBoard={gameRoomData.currentBoard}\n          ></MyHand>\n          <h3>Points - {players[username].points.length}   Trump - {trump}</h3>\n        </div>\n        <div className=\"board\">{boardComponent}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default props => {\n  const { onCreate, onJoin } = props;\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      }}\n    >\n      <input id=\"my-username\" placeholder=\"username\" type=\"text\"></input>\n      <input\n        id=\"game-code\"\n        placeholder=\"game code\"\n        value={localStorage.getItem(\"gameCode\")}\n        type=\"text\"\n      ></input>\n      <div\n        className=\"button\"\n        onClick={e =>\n          onJoin(\n            document.getElementById(\"game-code\").value,\n            document.getElementById(\"my-username\").value\n          )\n        }\n      >\n        JOIN\n      </div>\n      <div\n        className=\"button\"\n        onClick={e => onCreate(document.getElementById(\"my-username\").value)}\n      >\n        CREATE NEW\n      </div>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Game from \"./container/game/game\";\nimport socket from \"./socket\";\nimport JoinOrCreate from \"./component/join-create/joinorcreate\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameRoomData: undefined,\n      username: undefined\n    };\n\n    socket.on(\"update\", data => {\n      this.setState({\n        gameRoomData: JSON.stringify(data)\n      });\n    });\n  }\n\n  onCreate = username => {\n    socket.emit(\"create\", { username });\n    socket.on(\"created\", data => {\n      localStorage.setItem(\"gameCode\", data.gameCode);\n      this.setState({\n        gameRoomData: JSON.stringify(data),\n        username: username\n      });\n    });\n    socket.on(\"joined\", data => {\n      this.setState({ gameRoomData: JSON.stringify(data) });\n    });\n  };\n\n  onJoin = (gameCode, username) => {\n    socket.emit(\"join\", { gameCode, username });\n    socket.on(\"joined\", data => {\n      this.setState({ gameRoomData: JSON.stringify(data), username });\n    });\n  };\n\n  render = () => {\n    const { gameRoomData, username } = this.state;\n    return (\n      <div className=\"App\">\n        {gameRoomData ? (\n          <Game gameRoomData={gameRoomData} username={username}></Game>\n        ) : (\n          <JoinOrCreate\n            onCreate={this.onCreate}\n            onJoin={this.onJoin}\n          ></JoinOrCreate>\n        )}\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}